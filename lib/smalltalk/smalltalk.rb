#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'


class Object
  class <<self
    def subclass(name)
      self.const_set(name, Class.new(self))
    end

    def compile(code)
      signature, body = code.strip.split("\n", 2)
      pairs = signature.split(/:/)
      name = pairs.shift
      args = []
      until pairs.empty?
        args << pairs.shift
        pairs.shift # ignore
      end

      define_method(name, eval("lambda {|#{args.join(',')}| %o{ #{body} }}"))
    end
  end
end

class Proc
  def while_true(true_proc)
    true_proc.call while self.call 
  end
end

class TrueClass
  def if_true(true_proc, false_proc=lambda{})
    true_proc.call
  end

  def if_false(false_proc, true_proc=lambda{})
    true_proc.call
  end
end

class FalseClass
  def if_true(true_proc, false_proc=lambda{})
    false_proc.call
  end

  def if_false(false_proc, true_proc=lambda{})
    false_proc.call
  end
end

class SmalltalkParser < Racc::Parser

module_eval(<<'...end smalltalk.y/module_eval...', 'smalltalk.y', 157)

def convert_to_method_name(array)
  array.first.gsub(/(.)([A-Z])/) {"#{$1}_#{$2.downcase}"}
end

def parse(str)
  str = str + '.'
  @tokens = []
  until str.empty?
    if str =~ /\A\s+/
      # ignore
    elsif str =~ /\A".*?"/m
      # ignore
    elsif str =~ /\A'.*?'/m
      @tokens.push [:STRING, $&]
    elsif str =~ /\A\$./
      @tokens.push [:CHAR, '?' + $&]
    elsif str =~ /\A(true|false)/
      @tokens.push [:BOOLEAN, $& == 'true']
    elsif str =~ /\A-?\d+\.\d+/
      @tokens.push [:NUMBER, $&.to_f]
    elsif str =~ /\A-?\d+/
      @tokens.push [:NUMBER, $&.to_i]
    elsif str =~ /\A:=/
      @tokens.push [':=', ':=']
    elsif str =~ /\A(\+|-|\/|\*|<|>|%)/
      @tokens.push [:BINARY_OPERATOR, $&]
    elsif str =~ /\A\w+:/
      @tokens.push [:KEY, $&]
    elsif str =~ /\A\w+/
      @tokens.push [:IDENT, $&]
    elsif str =~ /\A./
      @tokens.push [$&, $&]
    end
    str = $'
  end

  do_parse
end

def next_token
  @tokens.shift
end
...end smalltalk.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     8,    25,    26,    27,    32,    13,    16,    18,     2,     4,
    34,     7,    33,   -40,   -40,    -5,     8,   -17,   -22,   -16,
   -21,    13,    16,    18,     2,     4,    32,     7,    -5,     8,
    35,    36,    31,    47,    13,    16,    18,     2,     4,     8,
     7,    48,    29,    28,    13,    16,    18,     2,     4,     8,
     7,    51,    25,   -17,    13,    16,    18,     2,     4,    40,
     7,   -16,   -23,    53,    13,    16,    18,     2,     4,    40,
     7,   nil,   nil,   nil,    13,    16,    18,     2,     4,    40,
     7,   nil,   nil,   nil,    13,    16,    18,     2,     4,     8,
     7,   nil,   nil,   nil,    13,    16,    18,     2,     4,     8,
     7,   nil,   nil,   nil,    13,    16,    18,     2,     4,   nil,
     7 ]

racc_action_check = [
     7,     8,     8,     8,    24,     7,     7,     7,     7,     7,
    21,     7,    20,     7,     7,     0,     0,     6,     6,    11,
    11,     0,     0,     0,     0,     0,    19,     0,    32,    32,
    22,    22,    15,    30,    32,    32,    32,    32,    32,    26,
    32,    31,    14,    12,    26,    26,    26,    26,    26,     4,
    26,    36,    40,    43,     4,     4,     4,     4,     4,    47,
     4,    45,     9,    50,    47,    47,    47,    47,    47,    28,
    47,   nil,   nil,   nil,    28,    28,    28,    28,    28,    29,
    28,   nil,   nil,   nil,    29,    29,    29,    29,    29,    27,
    29,   nil,   nil,   nil,    27,    27,    27,    27,    27,    35,
    27,   nil,   nil,   nil,    35,    35,    35,    35,    35,   nil,
    35 ]

racc_action_pointer = [
    13,   nil,   nil,   nil,    46,   nil,    11,    -3,    -2,    55,
   nil,    13,    37,   nil,    35,    32,   nil,   nil,   nil,    24,
    -1,    -5,    14,   nil,     2,   nil,    36,    86,    66,    76,
    26,    41,    26,   nil,   nil,    96,    48,   nil,   nil,   nil,
    49,   nil,   nil,    47,   nil,    55,   nil,    56,   nil,   nil,
    48,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -35,   -33,    -6,    -5,    -7,    -8,    -5,   -29,    -9,
   -10,   -11,   -42,   -30,   -42,   -42,   -31,    -2,   -32,   -42,
   -42,   -42,   -42,   -39,   -38,   -14,    -5,    -5,   -42,   -42,
   -20,   -42,    -3,   -34,   -36,    -5,   -42,   -12,   -13,   -19,
   -29,   -18,   -15,   -27,   -28,   -26,   -24,   -42,    54,    -4,
   -42,   -41,   -25,   -37 ]

racc_goto_table = [
    17,    21,    20,    41,    45,    24,    15,    39,    43,    44,
    46,    42,    30,    22,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    45,   nil,    37,    38,    43,    44,    52,    50,
   nil,   nil,    49,    24 ]

racc_goto_check = [
     2,    16,     3,     9,     9,     3,     1,     6,     6,     7,
    14,    11,    13,    17,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     9,   nil,     3,     3,     6,     7,    14,    16,
   nil,   nil,     2,     3 ]

racc_goto_pointer = [
   nil,     6,     0,    -2,   nil,   nil,   -21,   -20,   nil,   -25,
   nil,   -17,   nil,    -2,   -19,   nil,    -6,     6 ]

racc_goto_default = [
   nil,   nil,    23,    19,     3,     5,     6,     9,    10,    11,
    12,   nil,    14,   nil,   nil,     1,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 19, :_reduce_1,
  1, 19, :_reduce_2,
  2, 20, :_reduce_3,
  3, 20, :_reduce_4,
  0, 21, :_reduce_5,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  1, 21, :_reduce_none,
  3, 22, :_reduce_12,
  3, 23, :_reduce_13,
  2, 24, :_reduce_14,
  3, 25, :_reduce_15,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  2, 26, :_reduce_20,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  1, 30, :_reduce_none,
  2, 31, :_reduce_24,
  3, 31, :_reduce_25,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 32, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  1, 27, :_reduce_none,
  3, 27, :_reduce_34,
  1, 27, :_reduce_none,
  3, 33, :_reduce_36,
  5, 33, :_reduce_37,
  1, 34, :_reduce_none,
  1, 34, :_reduce_39,
  0, 35, :_reduce_40,
  3, 35, :_reduce_41 ]

racc_reduce_n = 42

racc_shift_n = 54

racc_token_table = {
  false => 0,
  :error => 1,
  "." => 2,
  :IDENT => 3,
  ":=" => 4,
  "=" => 5,
  :BINARY_OPERATOR => 6,
  :KEY => 7,
  :CHAR => 8,
  :BOOLEAN => 9,
  :NUMBER => 10,
  :STRING => 11,
  "(" => 12,
  ")" => 13,
  "[" => 14,
  "]" => 15,
  "|" => 16,
  ":" => 17 }

racc_nt_base = 18

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\".\"",
  "IDENT",
  "\":=\"",
  "\"=\"",
  "BINARY_OPERATOR",
  "KEY",
  "CHAR",
  "BOOLEAN",
  "NUMBER",
  "STRING",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\"|\"",
  "\":\"",
  "$start",
  "program",
  "statements",
  "expression",
  "assign",
  "comparison",
  "unary_message",
  "binary_message",
  "keyword_message",
  "primitive",
  "binary_message_receiver",
  "binary_message_operand",
  "keyword_message_receiver",
  "arguments",
  "keyword_message_operand",
  "block",
  "block_content",
  "temporaries" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'smalltalk.y', 4)
  def _reduce_1(val, _values, result)
                 result = ''
           
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 8)
  def _reduce_2(val, _values, result)
                 result = val.join("\n")
           
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 13)
  def _reduce_3(val, _values, result)
                    result = [val[0] + ';']
              
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 17)
  def _reduce_4(val, _values, result)
                    result = [val[0] + ';'] + val[2]
              
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 22)
  def _reduce_5(val, _values, result)
                    result = ''
              
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

module_eval(<<'.,.,', 'smalltalk.y', 33)
  def _reduce_12(val, _values, result)
                result = "#{val[0]} = #{val[2]}"
          
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 38)
  def _reduce_13(val, _values, result)
                    result = "#{val[0]} == #{val[2]}"
              
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 43)
  def _reduce_14(val, _values, result)
                       result = "#{val[0]}.#{val[1]}"
                 
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 48)
  def _reduce_15(val, _values, result)
                        result = val.join(' ')
                  
    result
  end
.,.,

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

module_eval(<<'.,.,', 'smalltalk.y', 59)
  def _reduce_20(val, _values, result)
                         receiver = val[0]
                     method_name = convert_to_method_name(val[1].first)
                     args = val[1].map{|a| a.last}.join(',')
                     result = "#{receiver}.#{method_name}(#{args})"
                   
    result
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'smalltalk.y', 71)
  def _reduce_24(val, _values, result)
                   result = [[val[0].sub(':', ''), val[1]]]
             
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 75)
  def _reduce_25(val, _values, result)
                   result = val[0] + [[val[1].sub(':', ''), val[2]]]
             
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

module_eval(<<'.,.,', 'smalltalk.y', 89)
  def _reduce_34(val, _values, result)
                   result = "(#{val[1]})"
             
    result
  end
.,.,

# reduce 35 omitted

module_eval(<<'.,.,', 'smalltalk.y', 95)
  def _reduce_36(val, _values, result)
               result = "lambda{#{val[1]}}"
         
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 99)
  def _reduce_37(val, _values, result)
               result = "lambda{|#{val[1]}|#{val[3]}}"
         
    result
  end
.,.,

# reduce 38 omitted

module_eval(<<'.,.,', 'smalltalk.y', 105)
  def _reduce_39(val, _values, result)
                       result = val.join(';')
                 
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 110)
  def _reduce_40(val, _values, result)
                     result = []
               
    result
  end
.,.,

module_eval(<<'.,.,', 'smalltalk.y', 114)
  def _reduce_41(val, _values, result)
                     result = val[0] + [val[2]]
               
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class SmalltalkParser
